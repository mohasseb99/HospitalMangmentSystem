/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospital;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author mohas
 */
public class HospitalGui extends javax.swing.JFrame {
    

    /**
     * Creates new form HospitalGui
     */
    public HospitalGui() {
        initComponents();
        //showPatient();
        //showDoctor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panelGui = new javax.swing.JTabbedPane();
        panelDoctor = new javax.swing.JTabbedPane();
        panelAddDoctor = new javax.swing.JPanel();
        addDoctor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameDoctor = new javax.swing.JTextField();
        idDoctor = new javax.swing.JTextField();
        addressDoctor = new javax.swing.JTextField();
        phoneDoctor = new javax.swing.JTextField();
        specialtyDoctor = new javax.swing.JTextField();
        resetDoctor = new javax.swing.JButton();
        updateDoctor = new javax.swing.JButton();
        deleteDoctor = new javax.swing.JButton();
        panelDisplayDoctor = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        panelPatient = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        panelAddPatient = new javax.swing.JPanel();
        addPatient = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        namePatient = new javax.swing.JTextField();
        idPatient = new javax.swing.JTextField();
        addressPatient = new javax.swing.JTextField();
        phonePatient = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        genderPatient = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        symptomsPatient = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        paymentPatient = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        diagnosisPatient = new javax.swing.JTextField();
        isEmergency = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();
        roomEmergency = new javax.swing.JTextField();
        resetPatient = new javax.swing.JButton();
        updatePatient = new javax.swing.JButton();
        deletePatient = new javax.swing.JButton();
        panelDisplayPatient = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        patientAppoin = new javax.swing.JTextField();
        payAppoin = new javax.swing.JTextField();
        genderAppoin = new javax.swing.JTextField();
        doctorAppoin = new javax.swing.JTextField();
        specialtyAppoin = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        dateAppoin = new com.toedter.calendar.JDateChooser();
        reserve = new javax.swing.JButton();
        updateAppoin = new javax.swing.JButton();
        deleteAppoin = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        appoinTable = new javax.swing.JTable();

        jTabbedPane4.addTab("tab1", jTabbedPane7);

        jTabbedPane1.addTab("Doctor", jTabbedPane4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addDoctor.setText("Add");
        addDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("ID");

        jLabel3.setText("Address");

        jLabel4.setText("Phone Number");

        jLabel5.setText("Specialty");

        nameDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameDoctorActionPerformed(evt);
            }
        });

        resetDoctor.setText("Reset");
        resetDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDoctorActionPerformed(evt);
            }
        });

        updateDoctor.setText("Update");
        updateDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDoctorActionPerformed(evt);
            }
        });

        deleteDoctor.setText("Delete");
        deleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddDoctorLayout = new javax.swing.GroupLayout(panelAddDoctor);
        panelAddDoctor.setLayout(panelAddDoctorLayout);
        panelAddDoctorLayout.setHorizontalGroup(
            panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddDoctorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(panelAddDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialtyDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(150, 150, 150))
        );
        panelAddDoctorLayout.setVerticalGroup(
            panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddDoctorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialtyDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(panelAddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        panelDoctor.addTab("Add Doctor", panelAddDoctor);

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "ID", "Address", "Phone Number", "Specialty"
            }
        ));
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(doctorTable);

        javax.swing.GroupLayout panelDisplayDoctorLayout = new javax.swing.GroupLayout(panelDisplayDoctor);
        panelDisplayDoctor.setLayout(panelDisplayDoctorLayout);
        panelDisplayDoctorLayout.setHorizontalGroup(
            panelDisplayDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        panelDisplayDoctorLayout.setVerticalGroup(
            panelDisplayDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );

        panelDoctor.addTab("Display All Doctors", panelDisplayDoctor);

        panelGui.addTab("Doctor", panelDoctor);

        addPatient.setText("Add");
        addPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientActionPerformed(evt);
            }
        });

        jLabel11.setText("Name");

        jLabel12.setText("ID");

        jLabel13.setText("Address");

        jLabel14.setText("Phone Number");

        namePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namePatientActionPerformed(evt);
            }
        });

        jLabel6.setText("Gender");

        genderPatient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Male", "Female" }));
        genderPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderPatientActionPerformed(evt);
            }
        });

        jLabel7.setText("Symptoms");

        jLabel8.setText("Payment Method");

        paymentPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentPatientActionPerformed(evt);
            }
        });

        jLabel9.setText("Diagnosis");

        isEmergency.setText("Emergency");
        isEmergency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isEmergencyActionPerformed(evt);
            }
        });

        jLabel25.setText("Room Number");

        roomEmergency.setEditable(false);
        roomEmergency.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                roomEmergencyPropertyChange(evt);
            }
        });

        resetPatient.setText("Reset");
        resetPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPatientActionPerformed(evt);
            }
        });

        updatePatient.setText("Update");
        updatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientActionPerformed(evt);
            }
        });

        deletePatient.setText("Delete");
        deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddPatientLayout = new javax.swing.GroupLayout(panelAddPatient);
        panelAddPatient.setLayout(panelAddPatientLayout);
        panelAddPatientLayout.setHorizontalGroup(
            panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelAddPatientLayout.createSequentialGroup()
                        .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addressPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelAddPatientLayout.createSequentialGroup()
                                .addComponent(phonePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(paymentPatient))
                            .addGroup(panelAddPatientLayout.createSequentialGroup()
                                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelAddPatientLayout.createSequentialGroup()
                                        .addComponent(idPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(124, 124, 124)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(namePatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(genderPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(symptomsPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diagnosisPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelAddPatientLayout.createSequentialGroup()
                                .addComponent(isEmergency, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(roomEmergency, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelAddPatientLayout.createSequentialGroup()
                        .addComponent(addPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deletePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        panelAddPatientLayout.setVerticalGroup(
            panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namePatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genderPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phonePatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paymentPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(symptomsPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diagnosisPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isEmergency)
                    .addComponent(jLabel25)
                    .addComponent(roomEmergency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(panelAddPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deletePatient, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(addPatient, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(updatePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        genderPatient.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 879, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelAddPatient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPatient.addTab("Add Patient", jPanel3);

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "ID", "Address", "Phone Number", "Gender", "Symptoms", "Payment Method", "Diagnosis", "Emergency", "Room Number"
            }
        ));
        patientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientTable);

        javax.swing.GroupLayout panelDisplayPatientLayout = new javax.swing.GroupLayout(panelDisplayPatient);
        panelDisplayPatient.setLayout(panelDisplayPatientLayout);
        panelDisplayPatientLayout.setHorizontalGroup(
            panelDisplayPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        panelDisplayPatientLayout.setVerticalGroup(
            panelDisplayPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );

        panelPatient.addTab("Display All Patients", panelDisplayPatient);

        panelGui.addTab("Patient", panelPatient);

        jLabel10.setText("Name of Patient");

        jLabel15.setText("Payment Method");

        jLabel16.setText("Gender");

        jLabel17.setText("Doctor Name");

        jLabel18.setText("Specialty");

        patientAppoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientAppoinActionPerformed(evt);
            }
        });

        jLabel19.setText("Date of Appointment");

        dateAppoin.setDateFormatString("\"dd MMM yyyy\"");

        reserve.setText("Reserve an Appointment");
        reserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveActionPerformed(evt);
            }
        });

        updateAppoin.setText("Update an Appointment");
        updateAppoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAppoinActionPerformed(evt);
            }
        });

        deleteAppoin.setText("Delete an Appointment");
        deleteAppoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppoinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(dateAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(reserve, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(patientAppoin, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(genderAppoin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(payAppoin, javax.swing.GroupLayout.Alignment.LEADING))
                                .addComponent(doctorAppoin))
                            .addComponent(specialtyAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialtyAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserve, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAppoin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Make Appointment", jPanel2);

        appoinTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name of Patient", "Payment Method", "Gender", "Name of Doctor", "Specialty", "Date"
            }
        ));
        appoinTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appoinTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(appoinTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Display All Appointments", jPanel4);

        panelGui.addTab("Appointments", jTabbedPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGui)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGui)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorActionPerformed
        try{
            String name = nameDoctor.getText();    
            String id = idDoctor.getText();
            String address = addressDoctor.getText();
            String phone = phoneDoctor.getText();
            String specialty = specialtyDoctor.getText();
            
            if(name.equals("")||id.equals("")||address.equals("")||phone.equals("")||specialty.equals("")){
                JOptionPane.showMessageDialog(this, "Please Enter ALl Data!");
            }
            else{
                Doctor doc = new Doctor(name, id, address, phone, specialty);
                hosp.addDoctor(doc);
                String data[] = {name, id, address, phone, specialty};
                DefaultTableModel tblModel = (DefaultTableModel)doctorTable.getModel();
                tblModel.addRow(data);
                JOptionPane.showMessageDialog(this, "Inserted Successfully");
                nameDoctor.setText("");    
                idDoctor.setText("");
                addressDoctor.setText("");
                phoneDoctor.setText("");
                specialtyDoctor.setText("");
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_addDoctorActionPerformed

    private void nameDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameDoctorActionPerformed

    private void genderPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderPatientActionPerformed

    private void namePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namePatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namePatientActionPerformed

    private void paymentPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentPatientActionPerformed

    private void roomEmergencyPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_roomEmergencyPropertyChange
        // type here
    }//GEN-LAST:event_roomEmergencyPropertyChange

    private void resetPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPatientActionPerformed
        namePatient.setText("");
        idPatient.setText("");
        genderPatient.setSelectedIndex(0);
        addressPatient.setText("");
        phonePatient.setText("");
        paymentPatient.setText("");
        symptomsPatient.setText("");
        diagnosisPatient.setText("");
        isEmergency.setSelected(false);
        roomEmergency.setText("");
    }//GEN-LAST:event_resetPatientActionPerformed

    private void resetDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDoctorActionPerformed
        nameDoctor.setText("");
        idDoctor.setText("");
        addressDoctor.setText("");
        phoneDoctor.setText("");
        specialtyDoctor.setText("");
    }//GEN-LAST:event_resetDoctorActionPerformed

    private void patientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseClicked
            int i = patientTable.getSelectedRow();
            TableModel model = patientTable.getModel();
            namePatient.setText(model.getValueAt(i,0).toString());
            idPatient.setText(model.getValueAt(i,1).toString());
            addressPatient.setText(model.getValueAt(i,2).toString());
            phonePatient.setText(model.getValueAt(i,3).toString());
            /*    gender    */
            String gender = model.getValueAt(i, 4).toString();
            if(gender.equals("Male")){
                genderPatient.setSelectedItem("Male");
            }
            if(gender.equals("Female")){
                genderPatient.setSelectedItem("Female");
            }
            /*       **********************/
            symptomsPatient.setText(model.getValueAt(i,5).toString());
            paymentPatient.setText(model.getValueAt(i,6).toString());
            diagnosisPatient.setText(model.getValueAt(i,7).toString());
            /*     emergency selected or not */
            String emergency = model.getValueAt(i,8).toString();
            if(emergency.equals("Emergency")){
                isEmergency.setSelected(true);
            }
            else{
                isEmergency.setSelected(false);
            }
            /* ****** */
            roomEmergency.setText(model.getValueAt(i,9).toString());
            // Appointment
            patientAppoin.setText(model.getValueAt(i,0).toString());
            payAppoin.setText(model.getValueAt(i,6).toString());
            genderAppoin.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_patientTableMouseClicked

    private void isEmergencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isEmergencyActionPerformed
        if (isEmergency.isSelected()){
            roomEmergency.setEditable(true);
        }
        else{
            roomEmergency.setEditable(false);
        }
    }//GEN-LAST:event_isEmergencyActionPerformed

    private void updateDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDoctorActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) doctorTable.getModel();
        if(doctorTable.getSelectedRowCount() == 1){
            String name = nameDoctor.getText();    
            String id = idDoctor.getText();
            String address = addressDoctor.getText();
            String phone = phoneDoctor.getText();
            String specialty = specialtyDoctor.getText();
            
            // set updated value to row
            tblModel.setValueAt(name, doctorTable.getSelectedRow(), 0);
            tblModel.setValueAt(id, doctorTable.getSelectedRow(), 1);
            tblModel.setValueAt(address, doctorTable.getSelectedRow(), 2);
            tblModel.setValueAt(phone, doctorTable.getSelectedRow(), 3);
            tblModel.setValueAt(specialty, doctorTable.getSelectedRow(), 4);
           
            JOptionPane.showMessageDialog(this, "Updated Successfully");
        }
        else{
            if(doctorTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Update");
            }
        }                                        
    }//GEN-LAST:event_updateDoctorActionPerformed

    private void addPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientActionPerformed
        try{
            String name = namePatient.getText();    
            String id = idPatient.getText();
            String address = addressPatient.getText();
            String phone = phonePatient.getText();
            String gender = genderPatient.getSelectedItem().toString();
            String symptoms = symptomsPatient.getText();
            String payMethod = paymentPatient.getText();
            String diagnosis = diagnosisPatient.getText();
            String emergency;
            if (isEmergency.isSelected()){
                emergency = "Emergency";
            }
            else{
                emergency = "Normal";
            }
            String roomNumber = roomEmergency.getText();
            if(name.equals("")||id.equals("")||address.equals("")||phone.equals("")||gender.equals("")||symptoms.equals("")||payMethod.equals("")||diagnosis.equals("")){
                JOptionPane.showMessageDialog(this, "Please Enter ALl Data!");
            }
            else{
                Patient pat = new Patient(name, id, address, phone, symptoms, payMethod, diagnosis, gender, roomNumber);
                hosp.addPatient(pat);
                String data[] = {name, id, address, phone, gender, symptoms, payMethod, diagnosis, emergency, roomNumber};
                DefaultTableModel tblModel = (DefaultTableModel)patientTable.getModel();
                tblModel.addRow(data);
                JOptionPane.showMessageDialog(this, "Inserted Successfully");
                namePatient.setText("");    
                idPatient.setText("");
                addressPatient.setText("");
                phonePatient.setText("");
                genderPatient.setSelectedIndex(0);
                symptomsPatient.setText("");
                paymentPatient.setText("");
                diagnosisPatient.setText("");
                emergency = "";
                isEmergency.setSelected(false);
                roomEmergency.setText("");
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_addPatientActionPerformed

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        int i = doctorTable.getSelectedRow();
        TableModel model = doctorTable.getModel();
        nameDoctor.setText(model.getValueAt(i,0).toString());
        idDoctor.setText(model.getValueAt(i,1).toString());
        addressDoctor.setText(model.getValueAt(i,2).toString());
        phoneDoctor.setText(model.getValueAt(i,3).toString());
        specialtyDoctor.setText(model.getValueAt(i,4).toString());
        // Appointment
        doctorAppoin.setText(model.getValueAt(i,0).toString());
        specialtyAppoin.setText(model.getValueAt(i,4).toString());
    }//GEN-LAST:event_doctorTableMouseClicked

    private void updatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) patientTable.getModel();
        if(patientTable.getSelectedRowCount() == 1){
            String name = namePatient.getText();    
            String id = idPatient.getText();
            String address = addressPatient.getText();
            String phone = phonePatient.getText();
            String gender = genderPatient.getSelectedItem().toString();
            String symptoms = symptomsPatient.getText();
            String payMethod = paymentPatient.getText();
            String diagnosis = diagnosisPatient.getText();
            String emergency;
            if (isEmergency.isSelected()){
                emergency = "Emergency";
            }
            else{
                emergency = "Normal";
            }
            String roomNumber = roomEmergency.getText();
            
            // set updated value to row
            tblModel.setValueAt(name, patientTable.getSelectedRow(), 0);
            tblModel.setValueAt(id, patientTable.getSelectedRow(), 1);
            tblModel.setValueAt(address, patientTable.getSelectedRow(), 2);
            tblModel.setValueAt(phone, patientTable.getSelectedRow(), 3);
            tblModel.setValueAt(gender, patientTable.getSelectedRow(), 4);
            tblModel.setValueAt(symptoms, patientTable.getSelectedRow(), 5);
            tblModel.setValueAt(payMethod, patientTable.getSelectedRow(), 6);
            tblModel.setValueAt(diagnosis, patientTable.getSelectedRow(), 7);
            tblModel.setValueAt(emergency, patientTable.getSelectedRow(), 8);
            tblModel.setValueAt(roomNumber, patientTable.getSelectedRow(), 9);
            
            JOptionPane.showMessageDialog(this, "Updated Successfully");
        }
        else{
            if(patientTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Update");
            }
        }
    }//GEN-LAST:event_updatePatientActionPerformed

    private void deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)patientTable.getModel();
        
        if(patientTable.getSelectedRowCount() == 1){
            tblModel.removeRow(patientTable.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Deleted Successfully");
        }
        else{
            if(patientTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row to Delete");
            }
        }
    }//GEN-LAST:event_deletePatientActionPerformed

    private void deleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)doctorTable.getModel();
        
        if(doctorTable.getSelectedRowCount() == 1){
            tblModel.removeRow(doctorTable.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Deleted Successfully");
        }
        else{
            if(doctorTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row to Delete");
            }
        }
    }//GEN-LAST:event_deleteDoctorActionPerformed

    private void patientAppoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientAppoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientAppoinActionPerformed

    private void reserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveActionPerformed
    try{
        String namePatient = patientAppoin.getText();    
        String payPatient = payAppoin.getText();
        String gender = genderAppoin.getText();
        String nameDoctor = doctorAppoin.getText();
        String specialty = specialtyAppoin.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(dateAppoin.getDate());
       
            if(namePatient.equals("")||payPatient.equals("")||genderPatient.equals("")||nameDoctor.equals("")||specialty.equals("")){
                JOptionPane.showMessageDialog(this, "Please Enter ALl Data!");
            }
            else{
                String data[] = {namePatient, payPatient, gender, nameDoctor, specialty, date};
                DefaultTableModel tblModel = (DefaultTableModel)appoinTable.getModel();
                tblModel.addRow(data);
                JOptionPane.showMessageDialog(this, "Inserted Successfully");
                patientAppoin.setText("");    
                payAppoin.setText("");
                genderAppoin.setText("");
                doctorAppoin.setText("");
                specialtyAppoin.setText("");
                dateAppoin.setCalendar(null);
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_reserveActionPerformed

    private void appoinTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appoinTableMouseClicked
        int i = appoinTable.getSelectedRow();
        TableModel model = appoinTable.getModel();
        patientAppoin.setText(model.getValueAt(i,0).toString());
        payAppoin.setText(model.getValueAt(i,1).toString());
        genderAppoin.setText(model.getValueAt(i,2).toString());
        doctorAppoin.setText(model.getValueAt(i,3).toString());
        specialtyAppoin.setText(model.getValueAt(i,4).toString());
        // Date
        try {
            String dateTable = model.getValueAt(i, 5).toString();
            System.out.println(dateTable);
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateTable);
            dateAppoin.setDate(date);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_appoinTableMouseClicked

    private void updateAppoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAppoinActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) appoinTable.getModel();
        if(appoinTable.getSelectedRowCount() == 1){
            String namePatient = patientAppoin.getText();    
            String payPatient = payAppoin.getText();
            String gender = genderAppoin.getText();
            String nameDoctor = doctorAppoin.getText();
            String specialty = specialtyAppoin.getText();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String date = dateFormat.format(dateAppoin.getDate());
            // set updated value to row
            tblModel.setValueAt(namePatient, appoinTable.getSelectedRow(), 0);
            tblModel.setValueAt(payPatient, appoinTable.getSelectedRow(), 1);
            tblModel.setValueAt(gender, appoinTable.getSelectedRow(), 2);
            tblModel.setValueAt(nameDoctor, appoinTable.getSelectedRow(), 3);
            tblModel.setValueAt(specialty, appoinTable.getSelectedRow(), 4);
            tblModel.setValueAt(date, appoinTable.getSelectedRow(), 5);
           
            JOptionPane.showMessageDialog(this, "Updated Successfully");
        }
        else{
            if(doctorTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Update");
            }
        }                     
    }//GEN-LAST:event_updateAppoinActionPerformed

    private void deleteAppoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppoinActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)appoinTable.getModel();
        
        if(appoinTable.getSelectedRowCount() == 1){
            tblModel.removeRow(appoinTable.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Deleted Successfully");
        }
        else{
            if(appoinTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select Single Row to Delete");
            }
        }       
    }//GEN-LAST:event_deleteAppoinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HospitalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HospitalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HospitalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HospitalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HospitalGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDoctor;
    private javax.swing.JButton addPatient;
    private javax.swing.JTextField addressDoctor;
    private javax.swing.JTextField addressPatient;
    private javax.swing.JTable appoinTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private com.toedter.calendar.JDateChooser dateAppoin;
    private javax.swing.JButton deleteAppoin;
    private javax.swing.JButton deleteDoctor;
    private javax.swing.JButton deletePatient;
    private javax.swing.JTextField diagnosisPatient;
    private javax.swing.JTextField doctorAppoin;
    private javax.swing.JTable doctorTable;
    private javax.swing.JTextField genderAppoin;
    private javax.swing.JComboBox<String> genderPatient;
    private javax.swing.JTextField idDoctor;
    private javax.swing.JTextField idPatient;
    private javax.swing.JCheckBox isEmergency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTextField nameDoctor;
    private javax.swing.JTextField namePatient;
    private javax.swing.JPanel panelAddDoctor;
    private javax.swing.JPanel panelAddPatient;
    private javax.swing.JPanel panelDisplayDoctor;
    private javax.swing.JPanel panelDisplayPatient;
    private javax.swing.JTabbedPane panelDoctor;
    private javax.swing.JTabbedPane panelGui;
    private javax.swing.JTabbedPane panelPatient;
    private javax.swing.JTextField patientAppoin;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField payAppoin;
    private javax.swing.JTextField paymentPatient;
    private javax.swing.JTextField phoneDoctor;
    private javax.swing.JTextField phonePatient;
    private javax.swing.JButton reserve;
    private javax.swing.JButton resetDoctor;
    private javax.swing.JButton resetPatient;
    private javax.swing.JTextField roomEmergency;
    private javax.swing.JTextField specialtyAppoin;
    private javax.swing.JTextField specialtyDoctor;
    private javax.swing.JTextField symptomsPatient;
    private javax.swing.JButton updateAppoin;
    private javax.swing.JButton updateDoctor;
    private javax.swing.JButton updatePatient;
    // End of variables declaration//GEN-END:variables

    /* to make doctor array */
   /*  String nameDoc = nameDoctor.getText();
    String idDoc = idDoctor.getText();
    String addressDoc = addressDoctor.getText();
    String phoneDoc = phoneDoctor.getText();
    String specialtyDoc = specialtyDoctor.getText();
    public ArrayList <Doctor> doctorsList(){
        ArrayList <Doctor> docs = new ArrayList<>();
        try{
            Doctor doc;
            doc = new Doctor(nameDoc, idDoc, addressDoc, phoneDoc, specialtyDoc);
            docs.add(doc);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return docs;
    } */
    
    /* to make patient array */   
    /*String namePat = namePatient.getText();
    String idPat = idPatient.getText();
    String addressPat = addressPatient.getText();
    String phonePat = phonePatient.getText();
    String genderPat = genderPatient.getSelectedItem().toString();
    String symptomsPat = symptomsPatient.getText();
    String diagnosisPat = diagnosisPatient.getText();
    String payPat = paymentPatient.getText();
    String emergencyPat;
    String roomPat = roomEmergency.getText();
    
    public ArrayList <Patient> patientsList(){
        ArrayList <Patient> pats = new ArrayList<>();
        try{
            Patient pat;
            pat = new Patient(namePat, idPat, addressPat, phonePat,symptomsPat, payPat, diagnosisPat, genderPat, roomPat);
            pats.add(pat);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return pats;
    } */
    /* hospital */
    Hospital hosp = new Hospital(new ArrayList<Doctor>(), new ArrayList<Patient>());
    
    /*public void showDoctor(){
        ArrayList<Doctor> doctors = doctorsList();
        DefaultTableModel model = (DefaultTableModel)doctorTable.getModel();
        Object[] row = new Object[6];
        for(int i = 0; i < doctors.size(); i++){
            row[0] = i+1;
            row[1] = doctors.get(i).getName();
            row[2] = doctors.get(i).getID();
            row[3] = doctors.get(i).getAddress();
            row[4] = doctors.get(i).getPhoneNumber();
            row[5] = doctors.get(i).getSpecialty();
            model.addRow(row);
        }
    }
    
    public void showPatient(){
        ArrayList<Patient> patients = patientsList();
        DefaultTableModel model = (DefaultTableModel)patientTable.getModel();
        Object[] row = new Object[11];
        for(int i = 0; i < patients.size(); i++){
            row[0] = i+1;
            row[1] = patients.get(i).getName();
            row[2] = patients.get(i).getID();
            row[3] = patients.get(i).getAddress();
            row[4] = patients.get(i).getPhoneNumber();
            row[5] = patients.get(i).getGender();
            row[6] = patients.get(i).getSymptoms();
            row[7] = patients.get(i).getPaymentMethod();
            row[8] = patients.get(i).getDiagnosis();
            if ((patients.get(i).getRoomNumber()).equals("")){
                row[9] = "Normal";
            }
            else{
                row[9] = "Emergency";
            }
            row[10] = patients.get(i).getRoomNumber();
            model.addRow(row);
        }
    } */
    
}
